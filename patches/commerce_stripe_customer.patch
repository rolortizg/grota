Index: src/Plugin/Commerce/PaymentGateway/Stripe.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Plugin/Commerce/PaymentGateway/Stripe.php b/src/Plugin/Commerce/PaymentGateway/Stripe.php
--- a/src/Plugin/Commerce/PaymentGateway/Stripe.php	(revision e13928e47a0adca540b255b1dba7418cc4ad4c57)
+++ b/src/Plugin/Commerce/PaymentGateway/Stripe.php	(date 1614901864214)
@@ -2,6 +2,7 @@

 namespace Drupal\commerce_stripe\Plugin\Commerce\PaymentGateway;

+use Drupal\commerce_order\Entity\Order;
 use Drupal\commerce_order\Entity\OrderInterface;
 use Drupal\commerce_payment\Exception\InvalidRequestException;
 use Drupal\commerce_payment\Exception\SoftDeclineException;
@@ -18,6 +19,7 @@
 use Drupal\commerce_stripe\Event\TransactionDataEvent;
 use Drupal\commerce_stripe\Event\StripeEvents;
 use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleExtensionList;
 use Drupal\Core\Form\FormStateInterface;
@@ -424,7 +426,15 @@
     $payment_method = $order->get('payment_method')->entity;

     $payment_method_remote_id = $payment_method->getRemoteId();
-    $customer_remote_id = $this->getRemoteCustomerId($order->getCustomer());
+    $customer = $order->getCustomer();
+    if ($customer->id()) {
+      $customer_remote_id = $this->getRemoteCustomerId($order->getCustomer());
+    }
+    elseif($order->hasField('field_customer_id')) {
+      if ($order->get('field_customer_id')->value) {
+        $customer_remote_id = $order->get('field_customer_id')->value;
+      }
+    }

     $amount = $this->toMinorUnits($order->getTotalPrice());
     $order_id = $order->id();
@@ -497,7 +507,21 @@
         $owner->save();
       }
       else {
-        $email = NULL;
+        $order = \Drupal::routeMatch()->getParameter('commerce_order');
+        if ($order instanceof Order && $order->hasField('field_customer_id')) {
+          $email = $order->getEmail();
+          $customer = \Stripe\Customer::create([
+            'email' => $email,
+            'description' => $this->t('Customer for :mail', [':mail' => $email]),
+            'payment_method' => $stripe_payment_method_id,
+          ]);
+          $customer_id = $customer->id;
+          $order->set('field_customer_id', $customer_id);
+          $order->save();
+        }
+        else {
+          $email = NULL;
+        }
       }

       if ($customer_id && $email) {
