<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function admin_web_theme($existing, $type, $theme, $path) {

  return [
    'block_content' => [
      'render element' => 'elements',
    ],
  ];

}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for block_content.
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 */
function admin_web_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $build['#theme'] = 'block_content';
}

/**
 * Preprocess function for block content template.
 *
 * @param $variables
 */
function template_preprocess_block_content(&$variables) {

  $variables['content'] = [];

  if (isset($variables['elements']['_layout_builder'])) {
    $variables['content'][] = $variables['elements']['_layout_builder'];
  }
  else {
    $content = [];
    foreach (Element::children($variables['elements']) as $key) {
      $content[$key] = $variables['elements'][$key];
    }
    $variables['content'] = $content;
  }

  if (isset($variables['attributes']['data-quickedit-entity-id'])) {
    unset($variables['attributes']['data-quickedit-entity-id']);
  }

}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @param array $variables
 *
 * @return array
 */
function admin_web_theme_suggestions_block_content(array $variables) {

  $suggestions = [];

  $block_content = $variables['elements']['#block_content'];

  $suggestions[] = implode('__', ['block_content', $block_content->bundle(), $variables['elements']['#view_mode']]);
  $suggestions[] = implode('__', ['block_content', $block_content->bundle()]);
  $suggestions[] = implode('__', ['block_content', $block_content->id()]);

  return $suggestions;

}

//Function para generar archivo log.
function develog($txt, $file = 'devel.log'){
  $myfile = fopen( 'sites/default/files/'. $file, "a+");// or die("Unable to open file!");
  $line = date('Y-m-d H:i:s') . ' - ' . $txt;
  fwrite($myfile,$line."\n");
  fclose($myfile);
}


function admin_web_preprocess_image_widget(&$variables) {
  $element = $variables['element'];

  $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

  if (!empty($element['fids']['#value'])) {
    $file = reset($element['#files']);
    $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
    $file_variables = array(
      'style_name' => $element['#preview_image_style'],
      'uri' => $file->getFileUri(),
    );

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $file_variables['width'] = $element['#value']['width'];
      $file_variables['height'] = $element['#value']['height'];
    } else {
      $image = \Drupal::service('image.factory')->get($file->getFileUri());
      if ($image->isValid()) {
        $file_variables['width'] = $image->getWidth();
        $file_variables['height'] = $image->getHeight();
      }
      else {
        $file_variables['width'] = $file_variables['height'] = NULL;
      }
    }

    $element['preview'] = array(
      '#weight' => -10,
      '#theme' => 'image_style',
      '#width' => $file_variables['width'],
      '#height' => $file_variables['height'],
      '#style_name' => $file_variables['style_name'],
      '#uri' => $file_variables['uri'],
    );

    // Store the dimensions in the form so the file doesn't have to be
    // accessed again. This is important for remote files.
    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['width'],
    );
    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $file_variables['height'],
    );
  }

  $variables['data'] = array();
  foreach (\Drupal\Core\Render\Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }

}


/**
 * Implements hook_page_attachments().
 *
 * @param array $attachments
 */
function admin_web_page_attachments(array &$attachments) {
  $theme = Drupal::theme()->getActiveTheme()->getName();
  $account = Drupal::currentUser();
  $admin = FALSE;
  $user = \Drupal\user\Entity\User::load($account->id());
  if ($user instanceof \Drupal\user\Entity\User) {
    if ($user->hasRole('propietario')) {
      $admin = TRUE;
    }
  }
  /*
  if ($theme == 'frontend' && $admin) {
    $attachments['#attached']['library'][] = 'gin/gin_classic_toolbar';
    $attachments['#attached']['library'][] = 'gin/gin_accent';
    $attachments['#attached']['library'][] = 'gin/gin_settings';
  }
  else if ($theme == 'gin') {
    $attachments['#attached']['library'][] = 'admin_web/gin';
  }
  */

  if ($theme == 'gin' && $admin) {
    $attachments['#attached']['library'][] = 'admin_web/gin';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function admin_web_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  if (!$user->hasPermission('access node revision')) {
    $form['revision_information']['#access'] = FALSE;
  }

}

/**
 * Implements hook_theme_registry_alter().
 */
function admin_web_theme_registry_alter(&$theme_registry) {
  $theme_registry['commerce_order__admin']['path'] = drupal_get_path('module', 'admin_web') . '/templates';
}

/**
 * Implements hook_preprocess_html().
 */
function admin_web_preprocess_html(&$variables) {
  $route = \Drupal::routeMatch();
  if ($route) {
    $route_name = $route->getRouteName();
    if (($route_name == 'entity.user.collection' || $route_name == 'entity.user.edit_form') && \Drupal::currentUser()->id() > 1) {
      $variables['attributes']['class'][] = 'path-admin-user';
    }
  }


}
